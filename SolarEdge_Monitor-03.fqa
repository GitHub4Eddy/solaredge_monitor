{"name":"SolarEdge Monitor","type":"com.fibaro.genericDevice","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_769"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_769"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"siteID","value":"1"},{"name":"apiKey","value":"L4QLVQ1LOKCQX2193VSEICXW61NP6B1O"},{"name":"interval","value":"360"},{"name":"httpTimeout","value":"5"},{"name":"debugLevel","value":"4"},{"name":"icon","value":"0"},{"name":"valuta","value":"euro"},{"name":"solarM2","value":"0"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP SolarEdge Monitor\n\n-- This QuickApp monitors your SolarEdge managed Solar Panels\n-- The QuickApp has (child) devices for currentPower, lastDayData, lastMonthData, lastYearData and lifeTimeData\n-- See API documentation on https://www.solaredge.com/sites/default/files/se_monitoring_api.pdf \n\n-- Changes version 0.3 (12th April 2021)\n-- Cleaned up the code\n\n-- Changes version 0.2 (12th April 2021)\n-- Disabled revenue value (not for lifeTimeData)\n\n-- Changes version 0.1 (11th April 2021)\n-- First (test) version\n\n\n-- Variables (mandatory): \n-- siteID = ID of your SolarEdge Monitor\n-- apiKey = API key of your SolarEdge Monitor\n-- valuta = Name of the valuta your saving with solar energy (default = euro)\n-- solarM2 = The amount of m2 Solar Panels (use . for decimals) for calculating Solar Power m2 (default = 0)\n-- interval = The daily API limitiation is 300 requests. The default request interval is 360 seconds (6 minutes).\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n-- icon = User defined icon number (add the icon via an other device and lookup the number) (default = 0)\n\n\n-- Example json overview string from API documentation:\n-- {\"overview\": {\"lastUpdateTime\": \"2021-03-01 02:37:47\",\"lifeTimeData\": {\"energy\": 761985.75,\"revenue\": 946.13104},\"lastYearData\": {\"energy\": 761985.8,\"revenue\": 946.13104},\"lastMonthData\": {\"energy\": 492736.7,\"revenue\": 612.09528},\"lastDayData\": {\"energy\": 1327.3,\"revenue\": 1.64844},\"currentPower\": {\"power\": 304.8}}}\n\n-- Example json overview string from SolarEdge response:\n-- {\"overview\":{\"lastUpdateTime\":\"2021-04-12 13:46:04\",\"lifeTimeData\":{\"energy\":7827878.0,\"revenue\":1728.5211},\"lastYearData\":{\"energy\":573242.0},\"lastMonthData\":{\"energy\":113386.0},\"lastDayData\":{\"energy\":7373.0},\"currentPower\":{\"power\":134.73499},\"measuredBy\":\"INVERTER\"}}\n\n\n-- No editing of this code is needed \n\n\nclass 'currentPower'(QuickAppChild)\nfunction currentPower:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"currentPower QuickappChild initiated, deviceId:\",self.id)\nend\nfunction currentPower:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.currentPower))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", data.lastUpdateTime)\nend\n\nclass 'solarPower'(QuickAppChild)\nfunction solarPower:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"solarPower QuickappChild initiated, deviceId:\",self.id)\nend\nfunction solarPower:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.solarPower))\n  self:updateProperty(\"unit\", \"Watt/m²\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nclass 'lastDayData'(QuickAppChild)\nfunction lastDayData:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"lastDayData QuickappChild initiated, deviceId:\",self.id)\nend\nfunction lastDayData:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.lastDayData))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\nclass 'lastMonthData'(QuickAppChild)\nfunction lastMonthData:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"lastMonthData QuickappChild initiated, deviceId:\",self.id)\nend\nfunction lastMonthData:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.lastMonthData))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\nclass 'lastYearData'(QuickAppChild)\nfunction lastYearData:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"lastYearData QuickappChild initiated, deviceId:\",self.id)\nend\nfunction lastYearData:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.lastYearData))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\nclass 'lifeTimeData'(QuickAppChild)\nfunction lifeTimeData:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"lifeTimeData QuickappChild initiated, deviceId:\",self.id)\nend\nfunction lifeTimeData:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.lifeTimeData))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", data.lifeTimeData_revenue)\nend\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp functions\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n      self:debug(text)\n  end\nend\n\n\nfunction QuickApp:solarPower(power, m2) -- Calculate Solar Power M2\n  self:logging(3,\"Start solarPower\")\n  if m2 > 0 and power > 0 then\n    solarPower = power / m2\n  else\n    solarPower = 0\n  end\n  return solarPower\nend\n\n\nfunction QuickApp:updateProperties() -- Update the properties\n  self:logging(3,\"updateProperties\")\n  self:updateProperty(\"value\", tonumber(data.currentPower))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"\")\nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels\n  self:logging(3,\"updateLabels\")\n  local labelText = \"\"\n  labelText = labelText ..\"Current power: \" ..data.currentPower ..\" Watt \" ..\"\\n\\n\"\n  labelText = labelText ..\"Solar power: \" ..data.solarPower ..\" Watt/m²\" ..\"\\n\"\n  labelText = labelText ..\"Lastday: \" ..data.lastDayData ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Lastmonth: \" ..data.lastMonthData ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Lastyear: \" ..data.lastYearData ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Lifetime: \" ..data.lifeTimeData ..\" kWh (\" ..data.lifeTimeData_revenue ..\")\" ..\"\\n\\n\"\n  labelText = labelText ..\"Last update: \" ..data.lastUpdateTime ..\"\\n\" \n  self:updateView(\"label1\", \"text\", labelText)\n  self:logging(2,labelText)\nend\n\n\nfunction QuickApp:valuesOverview() -- Get the values from json file Overview\n  self:logging(3,\"valuesOverview\")\n  data.currentPower = string.format(\"%.0f\", jsonTable.overview.currentPower.power)\n  data.lastDayData = string.format(\"%.2f\", tonumber(jsonTable.overview.lastDayData.energy/1000))\n  data.lastMonthData = string.format(\"%.2f\", tonumber(jsonTable.overview.lastMonthData.energy/1000))\n  data.lastYearData = string.format(\"%.2f\", tonumber(jsonTable.overview.lastYearData.energy/1000))\n  data.lifeTimeData = string.format(\"%.2f\", tonumber(jsonTable.overview.lifeTimeData.energy/1000))\n  data.lifeTimeData_revenue = string.format(\"%.2f\", jsonTable.overview.lifeTimeData.revenue) ..\" \" ..valuta\n  data.lastUpdateTime = jsonTable.overview.lastUpdateTime\n  data.solarPower = string.format(\"%.2f\",self:solarPower(tonumber(data.currentPower), tonumber(solarM2)))\nend\n\n\nfunction QuickApp:simData() -- Simulate SolarEdge Monitor\n  self:logging(3,\"Simulation mode\")\n  apiResult = '{\"overview\":{\"lastUpdateTime\":\"2021-04-12 13:46:04\",\"lifeTimeData\":{\"energy\":7827878.0,\"revenue\":1728.5211},\"lastYearData\":{\"energy\":573242.0},\"lastMonthData\":{\"energy\":113386.0},\"lastDayData\":{\"energy\":7373.0},\"currentPower\":{\"power\":134.73499},\"measuredBy\":\"INVERTER\"}}'\n \n  jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table \n  \n  self:valuesOverview()\n  self:updateLabels()\n  self:updateProperties()\n\n  for id,child in pairs(self.childDevices) do \n    child:updateValue(data,userID) \n  end\n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:getData()\n  end)\nend\n\n\nfunction QuickApp:getData()\n  self:logging(3,\"getData\")\n  self:logging(2,\"URL: \" ..url)\n  http:request(url, {\n    options={headers = {Accept = \"application/json\"},method = 'GET'},   \n      success = function(response)\n        self:logging(3,\"response status: \" ..response.status)\n        self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n        self:logging(2,\"Response data: \" ..response.data)\n\n        if response.data == nil or response.data == \"\" or response.data == \"[]\" then -- Check for empty result\n          self:warning(\"Temporarily no data from SolarEdge Monitor\")\n          self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n          fibaro.setTimeout(interval*1000, function() \n            self:getdata()\n          end)\n        end\n        \n        jsonTable = json.decode(response.data) -- JSON decode from api to lua-table\n\n        self:valuesOverview()\n        self:updateLabels()\n        self:updateProperties()\n\n        for id,child in pairs(self.childDevices) do \n          child:updateValue(data,userID) \n        end\n\n      end,\n      error = function(error)\n        self:error(\"error: \" ..json.encode(error))\n        self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n      end\n    }) \n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:getData()\n  end)\nend\n\n\nfunction QuickApp:createVariables() -- Create all Variables \n  jsonTable = {}\n  data = {}\n  data.currentPower = \"0\"\n  data.solarPower = \"0\" \n  data.lastDayData = \"0\"\n  data.lastMonthData = \"0\"\n  data.lastYearData= \"0\"\n  data.lifeTimeData= \"0\"\n  data.lifeTimeData_revenue = \"0\"\n  data.lastUpdateTime = \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all Quickapp Variables or create them\n  local siteID = self:getVariable(\"siteID\")\n  local apiKey = self:getVariable(\"apiKey\")\n  valuta = self:getVariable(\"valuta\")\n  solarM2 = tonumber(self:getVariable(\"solarM2\"))\n  interval = tonumber(self:getVariable(\"interval\")) \n  httpTimeout = tonumber(self:getVariable(\"httpTimeout\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n  local icon = tonumber(self:getVariable(\"icon\")) \n\n  -- Check existence of the mandatory variables, if not, create them with default values\n  if siteID == \"\" or siteID == nil then\n    siteID = \"1\" \n    self:setVariable(\"siteID\",siteID)\n    self:trace(\"Added QuickApp variable siteID\")\n  end\n if apiKey == \"\" or apiKey == nil then\n    apiKey = \"L4QLVQ1LOKCQX2193VSEICXW61NP6B1O\" -- This API key is just an example, it is not working\n    self:setVariable(\"apiKey\",apiKey)\n    self:trace(\"Added QuickApp variable apiKey\")\n  end \n  if valuta == \"\" or valuta == nil then\n    valuta = \"euro\" \n    self:setVariable(\"valuta\",valuta)\n    self:trace(\"Added QuickApp variable valuta\")\n  end  \n  if solarM2 == \"\" or solarM2 == nil then \n    solarM2 = \"0\" \n    self:setVariable(\"solarM2\",solarM2)\n    self:trace(\"Added QuickApp variable solarM2\")\n  end \n  if interval == \"\" or interval == nil then\n    interval = \"360\" \n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end\n  if httpTimeout == \"\" or httpTimeout == nil then\n    httpTimeout = \"5\" \n    self:setVariable(\"httpTimeout\",httpTimeout)\n    self:trace(\"Added QuickApp variable httpTimeout\")\n    httpTimeout = tonumber(httpTimeout)\n  end \n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" \n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if icon == \"\" or icon == nil then \n    icon = \"0\"\n    self:setVariable(\"icon\",icon)\n    self:trace(\"Added QuickApp variable icon\")\n    icon = tonumber(icon)\n  end\n  if icon ~= 0 then \n    self:updateProperty(\"deviceIcon\", icon) -- set user defined icon \n  end\n  url = \"https://monitoringapi.solaredge.com/site/\"..siteID ..\"/overview.json?api_key=\"..apiKey\nend\n\n\nfunction QuickApp:setupChildDevices()\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n      local initChildData = { \n        {className=\"currentPower\", name=\"Current Power\", type=\"com.fibaro.multilevelSensor\", value=0},\n        {className=\"solarPower\", name=\"Solar Power\", type=\"com.fibaro.multilevelSensor\", value=0},\n        {className=\"lastDayData\", name=\"Lastday\", type=\"com.fibaro.multilevelSensor\", value=0},\n        {className=\"lastMonthData\", name=\"Lastmonth\", type=\"com.fibaro.multilevelSensor\", value=0},\n        {className=\"lastYearData\", name=\"Lastyear\", type=\"com.fibaro.multilevelSensor\", value=0},\n        {className=\"lifeTimeData\", name=\"Lifetime\", type=\"com.fibaro.multilevelSensor\", value=0},\n      }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialInterfaces = {},\n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n\n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"onInit\") \n  \n  self:setupChildDevices()\n  self:getQuickAppVariables() \n  self:createVariables()\n  \n  http = net.HTTPClient({timeout=httpTimeout*1000})\n  \n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else\n    self:getData() -- Get data from SolarEdge Monitor\n  end\nend\n\n-- EOF"}]}